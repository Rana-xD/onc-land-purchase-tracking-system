<?php

namespace App\Exports;

use Maatwebsite\Excel\Concerns\FromCollection;
use Maatwebsite\Excel\Concerns\WithHeadings;
use Maatwebsite\Excel\Concerns\WithMapping;
use Maatwebsite\Excel\Concerns\WithTitle;
use Maatwebsite\Excel\Concerns\WithStyles;
use Maatwebsite\Excel\Concerns\ShouldAutoSize;
use PhpOffice\PhpSpreadsheet\Worksheet\Worksheet;
use PhpOffice\PhpSpreadsheet\Style\Fill;
use PhpOffice\PhpSpreadsheet\Style\Border;
use Illuminate\Support\Collection;
use Carbon\Carbon;

class MonthlySummarySheet implements FromCollection, WithHeadings, WithMapping, WithTitle, WithStyles, ShouldAutoSize
{
    protected $data;

    public function __construct(array $data)
    {
        $this->data = $data;
    }

    /**
     * @return \Illuminate\Support\Collection
     */
    public function collection()
    {
        $collection = collect();
        
        // Add report metadata
        $collection->push([
            'type' => 'metadata',
            'key' => 'Report Period',
            'value' => $this->data['summary']['start_date'] . ' to ' . $this->data['summary']['end_date'],
        ]);
        
        $collection->push([
            'type' => 'metadata',
            'key' => 'Generated By',
            'value' => $this->data['exported_by'],
        ]);
        
        $collection->push([
            'type' => 'metadata',
            'key' => 'Generated At',
            'value' => $this->data['exported_at'],
        ]);
        
        $collection->push([
            'type' => 'metadata',
            'key' => 'Total Payments',
            'value' => $this->data['summary']['payment_count'],
        ]);
        
        // Add a separator
        $collection->push([
            'type' => 'separator',
            'key' => '',
            'value' => '',
        ]);
        
        // Add summary totals
        $collection->push([
            'type' => 'summary',
            'key' => 'Total Amount',
            'value' => $this->data['summary']['total_amount'],
        ]);
        
        $collection->push([
            'type' => 'summary',
            'key' => 'Total Paid',
            'value' => $this->data['summary']['total_paid'],
        ]);
        
        $collection->push([
            'type' => 'summary',
            'key' => 'Total Overdue',
            'value' => $this->data['summary']['total_overdue'],
        ]);
        
        $collection->push([
            'type' => 'summary',
            'key' => 'Total Pending',
            'value' => $this->data['summary']['total_pending'],
        ]);
        
        // Add a separator
        $collection->push([
            'type' => 'separator',
            'key' => '',
            'value' => '',
        ]);
        
        // Add monthly breakdown
        foreach ($this->data['monthly_data'] as $month => $monthData) {
            $collection->push([
                'type' => 'month',
                'key' => $monthData['month_name'],
                'value' => $monthData['total_amount'],
                'paid' => $monthData['total_paid'],
                'overdue' => $monthData['total_overdue'],
                'pending' => $monthData['total_pending'],
            ]);
        }
        
        return $collection;
    }

    /**
     * @return array
     */
    public function headings(): array
    {
        return [
            'Category',
            'Description',
            'Total Amount',
            'Paid Amount',
            'Overdue Amount',
            'Pending Amount',
        ];
    }

    /**
     * @param mixed $row
     * @return array
     */
    public function map($row): array
    {
        if ($row['type'] === 'metadata') {
            return [
                'Report Info',
                $row['key'],
                $row['value'],
                '',
                '',
                '',
            ];
        } elseif ($row['type'] === 'summary') {
            return [
                'Summary',
                $row['key'],
                '$' . number_format($row['value'], 2),
                '',
                '',
                '',
            ];
        } elseif ($row['type'] === 'month') {
            return [
                'Monthly',
                $row['key'],
                '$' . number_format($row['value'], 2),
                '$' . number_format($row['paid'], 2),
                '$' . number_format($row['overdue'], 2),
                '$' . number_format($row['pending'], 2),
            ];
        } else {
            return ['', '', '', '', '', ''];
        }
    }

    /**
     * @return string
     */
    public function title(): string
    {
        return 'Summary';
    }

    /**
     * @param \PhpOffice\PhpSpreadsheet\Worksheet\Worksheet $sheet
     * @return array
     */
    public function styles(Worksheet $sheet)
    {
        // Apply styles to the header row
        $sheet->getStyle('A1:F1')->applyFromArray([
            'font' => [
                'bold' => true,
                'size' => 27,
            ],
            'fill' => [
                'fillType' => Fill::FILL_SOLID,
                'startColor' => [
                    'rgb' => 'E2EFDA',
                ],
            ],
            'borders' => [
                'bottom' => [
                    'borderStyle' => Border::BORDER_THIN,
                ],
            ],
        ]);
        
        // Apply styles to the data rows
        $lastRow = $sheet->getHighestRow();
        
        for ($row = 2; $row <= $lastRow; $row++) {
            $category = $sheet->getCell('A' . $row)->getValue();
            
            if ($category === 'Summary') {
                $sheet->getStyle('A' . $row . ':F' . $row)->applyFromArray([
                    'font' => [
                        'bold' => true,
                    ],
                    'fill' => [
                        'fillType' => Fill::FILL_SOLID,
                        'startColor' => [
                            'rgb' => 'F2F2F2',
                        ],
                    ],
                ]);
            } elseif ($category === 'Monthly') {
                // Highlight overdue amounts in red
                $overdueAmount = $sheet->getCell('E' . $row)->getValue();
                if (str_replace(['$', ','], '', $overdueAmount) > 0) {
                    $sheet->getStyle('E' . $row)->applyFromArray([
                        'font' => [
                            'color' => [
                                'rgb' => 'FF0000',
                            ],
                        ],
                    ]);
                }
            }
        }
        
        return [];
    }
}
